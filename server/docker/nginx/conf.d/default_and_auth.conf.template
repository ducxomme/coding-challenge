# https://dev.classmethod.jp/articles/docker-service-discovery/
resolver ${RESOLVER} valid=10s;

# 1r/s なので user 側は sleep 1秒入れるとほぼ確実に xrlr が途中でリセットされ 429 や 500 エラーがなくなる
limit_req_zone "$http_x_forwarded_for$http_authorization" zone=access:10m rate=1r/s;

map $status $retry_after {
    default '';
    429 '1000';
}

server {
    listen 80;
    listen [::]:80;
    #server_name _;
    client_max_body_size 10m;

    root /var/www/public;
    index index.php index.html;

    access_log /var/log/nginx/access.log json;
    error_log  /var/log/nginx/error.log;

    # タイムアウトを明示する。
    # php は 180 秒でタイムアウトさせるので、nginx は、それより長い 190 秒にしている。
    # 注意) API GW は 30秒でコネクションを閉じてしまうのであまり重要ではない
    # fastcgi_read_timeout 190;

    # https://qiita.com/tt2004d/items/59fdb3702230641a9198
    # X-FORWARDED-PROTOを使ってHTTPS判定する変数を作成
    # ヘルスチェックはログに出さない！！
    set $elb_https off;
    if ($http_x_forwarded_proto = https) {
        set $elb_https on;
    }

    location = /healthcheck.html {
        access_log off;
        break;
        #return 200 'ok';
    }

    location = /401.json {
        #access_log off;
        default_type application/json;
        return 401 '{"error": {"status_code": 401,"status": "Forbidden"}}';
    }

    location = /error/401 {
        internal;
        # access_log off;
        proxy_method GET;
        proxy_pass http://localhost/401.json;
    }

    location = /429 {
        internal;
        # access_log off;
        default_type application/json;
        add_header Retry-After $retry_after always;
        return 429 '{"error": {"status_code": 429,"status": "Too many requests"}}';
    }

    # https://serverfault.com/questions/562756/how-to-remove-the-path-with-an-nginx-proxy-pass/562850#562850
    location = /people {
        return 302 /v1/;
    }

    location /people/ {
        proxy_pass http://localhost/;  # note the trailing slash here, it matters!
    }

    location /v1/ {
        set $no_cache 1;
        limit_req_status 429;
        error_page  429  /429;

        limit_req zone=access burst=10 delay=3;

        auth_request        /auth;
        error_page 401 =401 /error/401;
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }

    location /auth {
        # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
        # https://serverfault.com/questions/240476/how-to-force-nginx-to-resolve-dns-of-a-dynamic-hostname-everytime-when-doing-p
        # https://qiita.com/toshihirock/items/1c711a7e9f054605323f
        set $authorizer ${AUTHORIZER};
        proxy_pass $authorizer;
        proxy_redirect          off;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
        proxy_set_header        X-Original-URI $request_uri;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass ${PHP_APP_HOST};
        fastcgi_index index.php;
        fastcgi_hide_header X-Powered-By;
        include fastcgi_params; # その他FastCGI設定ファイルを読み込む
        # PHP-FPMがプログラムを実行するときに必要なパラメータを渡す。サーバ変数のようなもの。
        # パスだけでなく、リクエストヘッダーだったりスキーマ情報だったりを渡している。
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTP_REQUEST_ID $request_id;
        fastcgi_param HTTPS $elb_https;
        fastcgi_intercept_errors on;
    }
}